{
	"info": {
		"_postman_id": "53adfd70-78d5-4958-b7b9-93118f8c3ec4",
		"name": "pruebaqatester",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26529519",
		"_collection_link": "https://apis66-6863.postman.co/workspace/todos~60a8c529-db09-4682-83d3-ddd120f1334e/collection/26529519-53adfd70-78d5-4958-b7b9-93118f8c3ec4?action=share&source=collection_link&creator=26529519"
	},
	"item": [
		{
			"name": "login-invalido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"",
							"",
							"pm.test(\"Invalid Login error expected\", () => {",
							"    pm.response.to.have.status(401);",
							"})",
							"",
							"pm.test(`\"Petition returns message: \"Las credenciales proporcionadas son incorrectas.\"`), () => {",
							"    pm.expect( responseData.message).to.eql(\"Las credenciales proporcionadas son incorrectas.\")",
							"}",
							"",
							"",
							"",
							"// just to know response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"//pm.test(\"Response format is JSON\", function () {",
							"  //  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"//});//",
							"",
							"",
							"pm.test(\"Response contains the correct content type header\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8'); ",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response object is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testeradl@test.com\",\n    \"password\": \"Tester\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/login",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "## Login API\n\nThis endpoint is used to authenticate a user and obtain a Bearer token for subsequent requests.\n\n### Endpoint\n\n`POST {{baseUrlApi}}/api/login`\n\n### Request Body\n\nThe request must include the following parameters in JSON format:\n\n- **email** (string): The email address of the user.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n#### Example Request\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n\n ```\n\n### Response\n\nThe response will contain a status code and a message. A successful login will return a Bearer token, while a `401 Unauthorized` status indicates that the credentials provided are invalid.\n\n- **Status Code**: `401`\n    \n- **Content-Type**: `application/json`\n    \n- {\"message\": \"\"}\n    \n\n### Obtaining the Bearer Token\n\n1. Send a POST request to the login endpoint with the required email and password.\n    \n2. If the credentials are valid, the response will include a Bearer token, which can be used for authentication in subsequent API requests.\n    \n\n### Retrieving User ID\n\nAfter successful authentication, the user ID can typically be retrieved from the response of a user information endpoint, which may require the Bearer token for access.\n\n### Setting Up Environment Variables in Postman\n\nTo store the Bearer token and user ID in Postman for later use:\n\n1. Go to the **Environment** tab in Postman.\n    \n2. Create a new environment or select an existing one.\n    \n3. Add a variable for the Bearer token (e.g., `bearerToken`) and set its initial value to the token received from the login response.\n    \n4. Add another variable for the user ID (e.g., `userId`) and set its initial value as needed.\n    \n\nThis setup allows you to easily reference the token and user ID in future requests by using the syntax `{{bearerToken}}` and `{{userId}}`."
			},
			"response": []
		},
		{
			"name": "login-invalido empty email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"",
							"",
							"pm.test(\"Invalid Login error expected\", () => {",
							"    pm.response.to.have.status(422);",
							"})",
							"",
							"pm.test(`\"Petition returns message: \"Los datos proporcionados no son v치lidos.\"`), () => {",
							"    pm.expect( responseData.message).to.eql(\"Los datos proporcionados no son v치lidos.\")",
							"}",
							"",
							"// just to know response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response contains the correct content type header\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json'); ",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response object is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"\",\n    \"password\": \"Tester\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/login",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "## Login API\n\nThis endpoint is used to authenticate a user and obtain a Bearer token for subsequent requests.\n\n### Endpoint\n\n`POST {{baseUrlApi}}/api/login`\n\n### Request Body\n\nThe request must include the following parameters in JSON format:\n\n- **email** (string): The email address of the user.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n#### Example Request\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n\n ```\n\n### Response\n\nThe response will contain a status code and a message. A successful login will return a Bearer token, while a `401 Unauthorized` status indicates that the credentials provided are invalid.\n\n- **Status Code**: `401`\n    \n- **Content-Type**: `application/json`\n    \n- {\"message\": \"\"}\n    \n\n### Obtaining the Bearer Token\n\n1. Send a POST request to the login endpoint with the required email and password.\n    \n2. If the credentials are valid, the response will include a Bearer token, which can be used for authentication in subsequent API requests.\n    \n\n### Retrieving User ID\n\nAfter successful authentication, the user ID can typically be retrieved from the response of a user information endpoint, which may require the Bearer token for access.\n\n### Setting Up Environment Variables in Postman\n\nTo store the Bearer token and user ID in Postman for later use:\n\n1. Go to the **Environment** tab in Postman.\n    \n2. Create a new environment or select an existing one.\n    \n3. Add a variable for the Bearer token (e.g., `bearerToken`) and set its initial value to the token received from the login response.\n    \n4. Add another variable for the user ID (e.g., `userId`) and set its initial value as needed.\n    \n\nThis setup allows you to easily reference the token and user ID in future requests by using the syntax `{{bearerToken}}` and `{{userId}}`."
			},
			"response": []
		},
		{
			"name": "login-invalido empty password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"",
							"",
							"pm.test(\"Invalid Login error expected\", () => {",
							"    pm.response.to.have.status(422);",
							"})",
							"",
							"pm.test(`\"Petition returns message: \"Los datos proporcionados no son v치lidos.\"`), () => {",
							"    pm.expect( responseData.message).to.eql(\"Los datos proporcionados no son v치lidos.\")",
							"}",
							"",
							"// just to know response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response contains the correct content type header\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json'); ",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response object is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testeradl@test.com\",\n    \"password\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/login",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "## Login API\n\nThis endpoint is used to authenticate a user and obtain a Bearer token for subsequent requests.\n\n### Endpoint\n\n`POST {{baseUrlApi}}/api/login`\n\n### Request Body\n\nThe request must include the following parameters in JSON format:\n\n- **email** (string): The email address of the user.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n#### Example Request\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n\n ```\n\n### Response\n\nThe response will contain a status code and a message. A successful login will return a Bearer token, while a `401 Unauthorized` status indicates that the credentials provided are invalid.\n\n- **Status Code**: `401`\n    \n- **Content-Type**: `application/json`\n    \n- {\"message\": \"\"}\n    \n\n### Obtaining the Bearer Token\n\n1. Send a POST request to the login endpoint with the required email and password.\n    \n2. If the credentials are valid, the response will include a Bearer token, which can be used for authentication in subsequent API requests.\n    \n\n### Retrieving User ID\n\nAfter successful authentication, the user ID can typically be retrieved from the response of a user information endpoint, which may require the Bearer token for access.\n\n### Setting Up Environment Variables in Postman\n\nTo store the Bearer token and user ID in Postman for later use:\n\n1. Go to the **Environment** tab in Postman.\n    \n2. Create a new environment or select an existing one.\n    \n3. Add a variable for the Bearer token (e.g., `bearerToken`) and set its initial value to the token received from the login response.\n    \n4. Add another variable for the user ID (e.g., `userId`) and set its initial value as needed.\n    \n\nThis setup allows you to easily reference the token and user ID in future requests by using the syntax `{{bearerToken}}` and `{{userId}}`."
			},
			"response": []
		},
		{
			"name": "login-invalido empty fields",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"",
							"",
							"pm.test(\"Invalid Login error expected\", () => {",
							"    pm.response.to.have.status(422);",
							"})",
							"",
							"pm.test(`\"Petition returns message: \"Los datos proporcionados no son v치lidos.\"`), () => {",
							"    pm.expect( responseData.message).to.eql(\"Los datos proporcionados no son v치lidos.\")",
							"}",
							"",
							"// just to know response time",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response contains the correct content type header\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json'); ",
							"});",
							"",
							"",
							"pm.test(\"Ensure that the response object is not empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object').that.is.not.empty;",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"\",\n    \"password\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/login",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "## Login API\n\nThis endpoint is used to authenticate a user and obtain a Bearer token for subsequent requests.\n\n### Endpoint\n\n`POST {{baseUrlApi}}/api/login`\n\n### Request Body\n\nThe request must include the following parameters in JSON format:\n\n- **email** (string): The email address of the user.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n#### Example Request\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"yourpassword\"\n}\n\n ```\n\n### Response\n\nThe response will contain a status code and a message. A successful login will return a Bearer token, while a `401 Unauthorized` status indicates that the credentials provided are invalid.\n\n- **Status Code**: `401`\n    \n- **Content-Type**: `application/json`\n    \n- {\"message\": \"\"}\n    \n\n### Obtaining the Bearer Token\n\n1. Send a POST request to the login endpoint with the required email and password.\n    \n2. If the credentials are valid, the response will include a Bearer token, which can be used for authentication in subsequent API requests.\n    \n\n### Retrieving User ID\n\nAfter successful authentication, the user ID can typically be retrieved from the response of a user information endpoint, which may require the Bearer token for access.\n\n### Setting Up Environment Variables in Postman\n\nTo store the Bearer token and user ID in Postman for later use:\n\n1. Go to the **Environment** tab in Postman.\n    \n2. Create a new environment or select an existing one.\n    \n3. Add a variable for the Bearer token (e.g., `bearerToken`) and set its initial value to the token received from the login response.\n    \n4. Add another variable for the user ID (e.g., `userId`) and set its initial value as needed.\n    \n\nThis setup allows you to easily reference the token and user ID in future requests by using the syntax `{{bearerToken}}` and `{{userId}}`."
			},
			"response": []
		},
		{
			"name": "login correcto y token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let access_token = pm.environment.get(\"access_token\");",
							"",
							"if (access_token) {",
							"  pm.request.headers.add({",
							"    key: \"Authorization\",",
							"    value: \"Bearer \" + access_token",
							"  });",
							"  console.log(\"Token de portador a침adido:\", access_token);",
							"} else {",
							"  console.log(\"No se encontr칩 el token de portador en las variables de entorno.\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJSON = pm.response.json(); // Define responseJSON",
							"",
							"pm.test(\"correct response 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"// Test response time just to test",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"// Test the response body structure and properties",
							"pm.test(\"Response body structure is valid\", function () {",
							"    pm.expect(responseJSON).to.have.all.keys('access_token', 'token_type', 'user');",
							"    pm.expect(responseJSON.user).to.have.all.keys('id', 'name', 'email', 'phone', 'email_verified_at', 'created_at', 'updated_at', 'permissions', 'roles');",
							"    pm.expect(responseJSON.user.roles).to.be.an('array'); // Fixed reference to roles",
							"    pm.expect(responseJSON.user.permissions).to.be.an('array'); // Fixed reference to permissions",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testeradl@test.com\",\n    \"password\": \"Tester@2025\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/login",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"login"
					]
				},
				"description": "## Login API Endpoint\n\nThis endpoint is used to authenticate a user and obtain an access token for subsequent requests. It allows users to log in by providing their email and password.\n\n### Request\n\n**Method:** POST  \n**URL:** `{{baseUrlApi}}/api/login`\n\n#### Request Body\n\nThe request body must be in JSON format and include the following parameters:\n\n- **email** (string): The email address of the user attempting to log in.\n    \n- **password** (string): The password associated with the user's account.\n    \n\n**Example Request Body:**\n\n``` json\n{\n  \"email\": \"user@example.com\",\n  \"password\": \"your_password\"\n}\n\n ```\n\n### Response\n\nUpon successful authentication, the API will return a JSON response with the following structure:\n\n- **access_token** (string): The token that can be used for authenticated requests.\n    \n- **token_type** (string): The type of the token (e.g., Bearer).\n    \n- **user** (object): An object containing user information:\n    \n    - **id** (integer): The unique identifier of the user.\n        \n    - **name** (string): The name of the user.\n        \n    - **email** (string): The email address of the user.\n        \n    - **phone** (string): The phone number of the user.\n        \n    - **email_verified_at** (datetime or null): The timestamp when the email was verified, or null if not verified.\n        \n    - **created_at** (datetime): The timestamp when the user account was created.\n        \n    - **updated_at** (datetime): The timestamp when the user account was last updated.\n        \n    - **permissions** (array): An array of permissions assigned to the user.\n        \n    - **roles** (array): An array of roles assigned to the user, where each role object contains:\n        \n        - **id** (integer): The unique identifier of the role.\n            \n        - **name** (string): The name of the role.\n            \n        - **guard_name** (string): The guard name associated with the role.\n            \n        - **created_at** (datetime): The timestamp when the role was created.\n            \n        - **updated_at** (datetime): The timestamp when the role was last updated.\n            \n        - **pivot** (object): Contains additional information about the relationship between the user and the role:\n            \n            - **model_type** (string): The type of the model.\n                \n            - **model_id** (integer): The identifier of the model.\n                \n            - **role_id** (integer): The identifier of the role.\n                \n\n**Example Response:**\n\n``` json\n{\n  \"access_token\": \"your_access_token\",\n  \"token_type\": \"Bearer\",\n  \"user\": {\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"phone\": \"123-456-7890\",\n    \"email_verified_at\": \"2023-01-01T00:00:00Z\",\n    \"created_at\": \"2023-01-01T00:00:00Z\",\n    \"updated_at\": \"2023-01-01T00:00:00Z\",\n    \"permissions\": [],\n    \"roles\": [\n      {\n        \"id\": 1,\n        \"name\": \"Admin\",\n        \"guard_name\": \"web\",\n        \"created_at\": \"2023-01-01T00:00:00Z\",\n        \"updated_at\": \"2023-01-01T00:00:00Z\",\n        \"pivot\": {\n          \"model_type\": \"User\",\n          \"model_id\": 1,\n          \"role_id\": 1\n        }\n      }\n    ]\n  }\n}\n\n ```"
			},
			"response": []
		},
		{
			"name": "consulta general",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"correct response 200 OK\", () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Update schema to match the actual response structure",
							"pm.test(\"Updated schema is valid\", function () {",
							"  var responseJSON = pm.response.json(); // Define responseJSON",
							"  var schema = {",
							"    type: \"array\",",
							"    items: {",
							"      type: \"object\",",
							"      properties: {",
							"        id: { type: \"integer\" },",
							"        name: { type: \"string\" },",
							"        cuit: { type: \"string\" }, // Changed to string to match expected format",
							"        email: { type: \"string\", format: \"email\" },",
							"        phone: { type: \"string\" },",
							"        address: { type: \"string\" },",
							"        balance: { type: \"string\" }, // Assuming balance is a string",
							"        is_active: { type: \"boolean\" },",
							"        created_at: { type: \"string\" },",
							"        updated_at: { type: \"string\" },",
							"        deleted_at: { type: [\"string\", \"null\"] } // Allowing null value",
							"      },",
							"      required: [\"id\", \"name\", \"email\", \"is_active\", \"created_at\", \"updated_at\"]",
							"    }",
							"  };",
							"",
							"  pm.expect(tv4.validate(schema, responseJSON)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/clients",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"clients"
					]
				},
				"description": "## Get Clients\n\nThis endpoint retrieves a list of clients from the API. It is a **GET** request that returns client information in JSON format.\n\n### Request\n\n- **Method**: `GET`\n    \n- **Endpoint**: `{{baseUrlApi}}/api/clients`\n    \n\n### Response\n\n- **Status**: `200 OK`\n    \n- **Content-Type**: `application/json`\n    \n\n### Response Schema\n\nThe response will be an array of client objects, each containing the following fields:\n\n- **id** (integer): Unique identifier for the client.\n    \n- **name** (string): Name of the client.\n    \n- **cuit** (string): CUIT (Unique Tax Identification Code) of the client.\n    \n- **email** (string): Email address of the client.\n    \n- **phone** (string): Phone number of the client.\n    \n- **address** (string): Address of the client.\n    \n- **balance** (string): Current balance associated with the client.\n    \n- **is_active** (boolean): Indicates if the client is currently active.\n    \n- **created_at** (string): Timestamp of when the client was created.\n    \n- **updated_at** (string): Timestamp of when the client was last updated.\n    \n- **deleted_at** (nullable string): Timestamp of when the client was deleted, if applicable.\n    \n\n### Example Response\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"name\": \"\",\n        \"cuit\": \"\",\n        \"email\": \"\",\n        \"phone\": \"\",\n        \"address\": \"\",\n        \"balance\": \"\",\n        \"is_active\": true,\n        \"created_at\": \"\",\n        \"updated_at\": \"\",\n        \"deleted_at\": null\n    }\n]\n\n ```\n\nThis endpoint is useful for fetching all clients and their relevant details for further processing or display in client management applications."
			},
			"response": []
		},
		{
			"name": "nuevo-cliente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();",
							"pm.environment.set(\"mi_id\", response.id);",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.expect(pm.response.code).to.eql(201);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"",
							"pm.test(\"Response schema includes required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('name', 'cuit','email','phone','address','balance','is_active','updated_at','created_at','id');",
							"});",
							"",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"var responseData = pm.response.json();",
							"",
							"// Test the response status code and structure",
							"pm.test(\"Response status code is 201 and body structure is valid\", function () {",
							"    pm.expect(responseData).to.be.an('object').that.has.any.keys('id', 'name', 'email');",
							"});",
							"",
							"",
							"",
							"// Test ID field properties",
							"pm.test(\"ID must be a non-empty number\", function () {",
							"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.greaterThan(0);",
							"});",
							"",
							"// Test Name field properties",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Juan P칠rez\",\n    \"cuit\": \"20-223852674-9\",\n    \"email\": \"juan.perez45@example.com\",\n    \"phone\": \"+54 9 11 1234-5678\",\n    \"address\": \"Av. Corrientes 1234, Buenos Aires, Argentina\",\n    \"balance\": \"15230.75\",\n    \"is_active\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/clients",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"clients"
					]
				},
				"description": "## Add Client\n\nThis endpoint allows you to create a new client in the system. It accepts client details as input and returns the created client's information along with additional metadata.\n\n### Request\n\n**Method:** POST  \n**URL:** `{{baseUrlApi}}/api/clients`\n\n**Request Body (JSON):**\n\n``` json\n{\n  \"name\": \"string\",       // The name of the client\n  \"cuit\": \"string\",       // The CUIT (tax identification number) of the client\n  \"email\": \"string\",      // The email address of the client\n  \"phone\": \"string\",      // The phone number of the client\n  \"address\": \"string\",    // The address of the client\n  \"balance\": \"string\",    // The balance amount of the client\n  \"is_active\": \"boolean\"  // Status indicating if the client is active\n}\n\n ```\n\n### Response\n\n**Status Code:** 201 Created  \n**Content-Type:** application/json\n\n**Response Body (JSON):**\n\n``` json\n{\n  \"name\": \"string\",       // The name of the client\n  \"cuit\": \"string\",       // The CUIT of the client\n  \"email\": \"string\",      // The email address of the client\n  \"phone\": \"string\",      // The phone number of the client\n  \"address\": \"string\",    // The address of the client\n  \"balance\": \"string\",    // The balance amount of the client\n  \"is_active\": \"boolean\", // Status indicating if the client is active\n  \"updated_at\": \"string\", // Timestamp of when the client was last updated\n  \"created_at\": \"string\", // Timestamp of when the client was created\n  \"id\": \"integer\"         // Unique identifier for the client\n}\n\n ```\n\n### Notes\n\n- Ensure that all required fields are provided in the request body.\n    \n- The response will include the created client's details along with timestamps for creation and last update."
			},
			"response": []
		},
		{
			"name": "actualizar-cliente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(800);",
							"});",
							"",
							"",
							"pm.test(\"Response schema includes required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.all.keys('id','name', 'cuit','email','phone','address','balance','is_active','created_at','updated_at','deleted_at');",
							"",
							"",
							"",
							"",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Juan P칠rez\",\n    \"cuit\": \"20-223852674-9\",\n    \"email\": \"juan.perez45@example.com\",\n    \"phone\": \"+54 9 11 1234-5678\",\n    \"address\": \"Av. Corrientes 1234, Buenos Aires, Argentina\",\n    \"balance\": \"15230.75\",\n    \"is_active\": false\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/clients/{{mi_id}}",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"clients",
						"{{mi_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "borrar cliente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 204\", function () {",
							"  pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrlApi}}/api/clients/{{mi_id}}",
					"host": [
						"{{baseUrlApi}}"
					],
					"path": [
						"api",
						"clients",
						"{{mi_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}